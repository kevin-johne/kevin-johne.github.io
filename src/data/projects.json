[
  {
    "path": "skylark",
    "title": "Skylark",
    "year": "2020",
    "duration": "24",
    "type": "application",
    "brandColor": "#227aff",
    "logo": "../images/icons/skylark-white.svg",
    "tags": [
      "CMS",
      "AngularJS",
      "React",
      "Webpack",
      "Redux",
      "Jest",
      "Cypress"
    ],
    "blocks": [
      {
        "type": "description",
        "content": [
          "Ostmodern is a multi-media digital agency and it has an CMS called \"Skylark\". This platform was used by F1, BBC, Sky, Rakuten to manage their video content and allow users streaming that content.",
          "The CMS manages meta data and licences for digital content. It is basically the main gateway to connect a complex video platform to different services, from analytics, scheduling to video upload. In order to access this gateway a rich API is provided to the customers, so that they can fetch a set of video stream URL and its meta data.",
          "On top of that API is a frontend, which provided a portal and an user interface for content creators and editors. And here my part starts, as I was the lead frontend developer for the user interface, managing a small team.",
          "The interesting part of the frontend was that it was driven by configuration files, because each client had its own instance of Skylark, own database, own server, etc. etc. But we had only one frontend code base to satisfy different client requirements. In order to show different components and layouts for each customer a configuration defined what to show, in which order and how to query that data.",
          "Configurations files are a plain JSON describing detailed which fields should be displayed and how they are related. Naturally to keep the error rate low a schema is checking that those files are correctly written. Those long JSON files were created and maintained manually, this was a nightmare, hence we developed a CLI to generate configurations.",
          "The frontend was developed using an older version of AngularJS, we migrated it to a React stack, using Redux, React Testing Library and Webpack. There were few core concepts which are different between React and Angular that we had to apply different migration strategies for different models, for example: navigation, components, state and services.",
          "We started by touching the lowest AngularJS components which are the bottom of the dependencies tree and working up that tree until bigger junks where React components.",
          "The biggest difference between Angular and React are dependency management. Angular is using dependency injection, where react is using just imports. In order to not break Angular we had to make wrappers so that things can be loaded via dependency injection, but as well as being imported for React.",
          "Services in Angular are presenting usually a singleton to represent data or some utility functions (Factories). Factories were easily replaced by extracting the functions in to pure functions. When it was a singleton representing data, we created a slice in Redux with actions and reducers.",
          "Another part was updating the testing plans, moving away from Jasmine and using Jest instead, this was simple as the tests are written in a similar manner. The nice thing was with Jest that we could use React Testing Library for early UI tests.",
          "Working for 2 years on Skylark I developed many different features. Video upload was one of my favourite works as it allowed users of the CMS to upload multiple videos into their video content providers like MUX or Bitmovin, using an UI instead of the API. You could easily upload files which are many gigabytes big, as it was handling retries, pause and continue, and even go temporarily offline during the process.",
          "I truly enjoyed working on Skylark and looking forward to find similar projects."
        ]
      },
      {
        "type": "contentImage",
        "title": "Skylark Dashboard",
        "content": [
          "The Skylark Dashboard is a very powerful tool to manage your video content and its meta data. It is a single page application, which is built with React and Redux. The CMS is the backbone of applications with 100k user per day."
        ],
        "image": {
          "title": "Skylark",
          "src": "../images/content/project/skylark/dashboard.png"
        }
      },
      {
        "type": "links",
        "links": [
          {
            "text": "Visit skylarkplatform.com",
            "href": "https://skylarkplatform.com"
          }
        ]
      }
    ],
    "show": true
  },
  {
    "path": "calvin-klein",
    "title": "Calvin Klein",
    "brandColor": "#000",
    "year": "2019",
    "logo": "../images/icons/calvin-klein-white.svg",
    "duration": "3",
    "type": "website",
    "tags": ["React", "SCSS", "Webpack", "Redux"],
    "blocks": [
      {
        "type": "description",
        "content": [
          "A short recap of redesign of Calvin Klein to a new stack within 3 months. We moved the code base from JSP to React and Redux. JSP is the frontend language for a monolithic Java web application, the technology has struggles meeting the standards of a modern e-Commerce platform, especially with APIs with JSON response. Redux is perfect in handling data in a headless manner and tunnelling the information to the react components.",
          "When the application is loaded the majority of data is in the html page attached to the window object, like store, product, navigation, and internationalisation and other cacheable data, this saves few XHR requests. After page loaded, repeatedly changing information like user info, basket, product stock is fetched asynchronously.",
          "This was the second commercial project where I used React. I enjoy the way components are written, because the structure of the application takes a natural and extendable flow. A high priority was to make the components dummy without internal state, but merely pass down properties - following this, components stay simple and removes the need of documentation. The components are easy replaceable and maintainable.",
          "Now you wonder where the state is stored, when components are dummy and receiving only props. Firstly we have few components which have internal state, like a toggle, etc. However we tried to store the state in Redux slices, there are approx. 10 of them. We had slices for authentication, basket, products, navigation, analytics, internationalisation, and more.",
          "Slices are a neat way of housekeeping the state, I am a fan of keeping them flat and broad. So that the dependencies getting not deep and complex. Just thing of object spread how straight forward it is when everything is one level deep. My rule of thumb is max 2 levels deep, is it more than that it signals and increase in dependency and complexity, and it is a good idea to separate some of the data in a new slice. Another advantage is that a shallow store will not update the component as often as a store with a deep object, because the \"subscribed\" component will only \"watch\" just one value and not an whole object where the reconciliation flags an false positive of change. This means the object looks the same but it isn't as it got spread but with the same values. A shallow comparison is always faster than a holistic comparison."
        ]
      },
      {
        "type": "contentImage",
        "title": "Redesign",
        "content": [
          "The redesign was done through out the main shopping areas at the same time. We improved pages for the product list, product detail, shopping bag and the checkout. Other pages like account pages got a little update as they have now the new header and footer as well."
        ],
        "image": {
          "title": "Redesign",
          "src": "../images/content/project/calvin-klein/overview_x2.jpg"
        }
      },
      {
        "type": "contentImage",
        "title": "Smart Navigation",
        "image": {
          "title": "Smart Navigation",
          "src": "../images/content/project/calvin-klein/navigation_x2.jpg"
        },
        "content": [
          "Remember the frustration when going from main menu to sub menu but activate a different submenu because the mouse is going over another main menu link. I love to use the technique where tracking the mouse direction to predict if a menu should open. No more frustration and the menu feels super natural!"
        ]
      },
      {
        "type": "links",
        "links": [
          {
            "href": "https://calvinklein.co.uk",
            "text": "visit calvinklein.co.uk"
          }
        ]
      }
    ],
    "show": true
  },
  {
    "path": "stroeer",
    "title": "Ströer",
    "year": "2016",
    "brandColor": "#ff5a10",
    "logo": "../images/icons/stroer-white.svg",
    "type": "application",
    "duration": "9",
    "tags": ["AngularJS", "SCSS", "Struts", "Java", "Lead Frontend Developer"],
    "blocks": [
      {
        "type": "description",
        "content": [
          "I started working on Ströer OMS to develop a calendar app. OMS is an internal management platform for maintenance of their billboards. Which has a complex infrastructure. I was working mainly on the frontend, writing templates in Struts (Java template engine), displaying data with AngularJS, and styling with SCSS. Data was retrieved from an API with ajax calls.",
          "After finishing the calendar, I have been continuing working for Ströer for platform maintenance. I soloed the frontend till couple of months later I established a team of three developer which I was leading."
        ]
      },
      {
        "type": "contentImage",
        "title": "List Management",
        "image": {
          "title": "List Management",
          "src": "../images/content/project/stroeer/overview_2x.jpg"
        },
        "content": [
          "OMS is a complex application with many different views for management of billboards and billboard events. Most of the views have a list of items in common. I implemented the UI for an advanced filter system including saving, loading, editing, and deleting of filter settings."
        ]
      },
      {
        "type": "contentImage",
        "title": "Calendar",
        "image": {
          "title": "Calendar",
          "src": "../images/content/project/stroeer/calendar_2x.jpg"
        },
        "content": [
          "The calendar is displaying management tasks of a selected billboard. The span goes from yearly to monthly for a more detailed view. Allowing users getting their daily tasks, and for the upper management a quick info about which tasks have been done in time."
        ]
      }
    ],
    "show": true
  },
  {
    "path": "condor",
    "title": "Condor",
    "year": "2016",
    "type": "website",
    "brandColor": "#ffb800",
    "logo": "../images/icons/condor-white.svg",
    "duration": "4",
    "tags": ["ARIA", "semantic", "screen reader"],
    "blocks": [
      {
        "type": "description",
        "content": [
          "My journey with Condor airlines was a pleasant one. I took the chance to teach myself a new skill, many developers don't even think or know about it.",
          "condor part of the Thomas Cook Group is offering a service of public airline booking. In the UK and US it is a law to meet the standard of WCAG level AA for those systems. When this rule got released the booking engine and website needed to be enhanced for people with disabilities till the end of 2015(US) and 2016(UK).",
          "Before making improvements in usability, we needed a tool to measure the current state and every incremental improvement we may make, to reach the goal as fast as possible. We asked a third party service to provide us with reports after every major release, and we used browser tools and screen readers to test our changes. Testing became time intensive through lag of tools.",
          "A big part of the changes had been made in the use of correct context tags, i.e. using buttons instead of links for submitting forms, or ordering headlines h3 cannot come before h2. We added new elements, i.e. skip links and close buttons for layers, and improved tags with aria attributes to describe the seat and prices.",
          "The changes we made until this point were usability improvements for screen-readers, other people with a visual disability and using normal screens seeing mostly fewer colours. The visual designer needed to come up with a new high contrast theme. green changed to orange, white text on coloured background changed to dark gray, blue got darker, active elements needing a highlighted border, and many other changes to increase contrast."
        ]
      },
      {
        "type": "contentImage",
        "title": "Helper Elements",
        "content": [
          "Extra elements helping to skip content, outlining focused elements, and buttons for closing layers. Skip links are only visible on focus."
        ],
        "image": {
          "title": "Helper Elements",
          "src": "../images/content/project/condor/helper-elements_2x.jpg"
        }
      },
      {
        "type": "contentImage",
        "content": [
          "HTML5 provides a big range of tags to describe the visual content better. We took care that we use the right tags, and added when necessary ARIA attributes"
        ],
        "image": {
          "title": "Semantic Markup",
          "src": "../images/content/project/condor/semantic-markup_2x.jpg"
        }
      }
    ],
    "show": true
  },
  {
    "path": "gedore",
    "title": "Gedore",
    "year": "2015",
    "duration": "3",
    "brandColor": "#1c4587",
    "logo": "../images/icons/gedore-white.svg",
    "type": "website",
    "tags": ["eCommerce", "frontend", "atomic"],
    "blocks": [
      {
        "type": "description",
        "content": [
          "Here we have three projects for the client Gedore. Everything has been freshly designed and developed. A complete redesign - topic is BOLD. Starting off with the Gedore brand site, presenting news, product catalog, interactive storefinder and many more. Behind the scene is a Typo3 CMS to serve those sites. Website are easily created as the toolbox offers 20+ modules and more global patterns. All handcrafted by denkwerk.",
          "In the frontend department, we created a living style guide, based on the module catalog made by the UX and visual designer. This living style guide was a list of global definitions, patterns, modules, and example pages. As global definitions we specified general configuration which everything is based on later, containing i.e. font families, font sizes, colours, grid, indents, breakpoints, margins, and animation time functions. The beauty of these configurations is the possibility to alter the whole theme within seconds. That's how we created the Carolus brand site, only by changing colour, font families and other settings.",
          "I'm very thank full to had a part of these projects, my UI easter egg which is the main navigation. Which has a drop down navigation on hover, a tricky piece. The problem? Not closing the submenu accidentally by hovering over another main menu entry when the mouse is one the way to a sub menu entry diagonally placed to its parent. Preventing this is usually solved with a time out which activates on leaving a main item. it solves the problem for fast user with a fast movement. Not only it doesn't work for slow mouse movements, as well it makes it not responsive.",
          "A mouse direction detection is used. Spanning a triangle from the current mouse position by entering a main menu entry to the top left and top right corner of the submenu. If the mouse is staying it the triangle, even hovering over another main menu entry, the submenu stays open. This technique is invented by Apple and used by amazon.com at their navigation.",
          "And lastly the Gedore shop, which is OXID and smarty templates. We created a living style guide, out of smarty modules and patterns, each can be easily included in to the page, and modified through parameters."
        ]
      },
      {
        "type": "contentImage",
        "content": [
          "Generating a living style guide using Grunt, Nunjucks, and SCSS. The output are HTML pages of general configurations, patterns, modules, and static content pages. Which were later implemented in Typo3."
        ],
        "image": {
          "title": "Style Guide",
          "src": "../images/content/project/gedore/styleguide_2x.jpg"
        }
      },
      {
        "type": "contentImage",
        "title": "Variables",
        "content": [
          "Nunjucks and SCSS allowed us to use variables. Already in the early state, we established many variables for later configuration. When we needed to develop Carolus, this technique came very handy. A change in the configuration and we were done, except updating content."
        ],
        "image": {
          "title": "Variables",
          "src": "../images/content/project/gedore/theme_2x.jpg"
        }
      },
      {
        "type": "description",
        "title": "Smart Navigation",
        "content": [
          "Invented by Apple to improve on OS X sub navigation. Amazon is using this technique to improve sub navigation as well. That's why I implemented this feature for Gedore on all three sites. No timeout, only protocol mouse movements to assume when to close and open a menu."
        ],
        "image": {
          "title": "Smart Navigation",
          "src": "../images/content/project/gedore/navigation_2x.jpg"
        }
      },
      {
        "type": "links",
        "links": [
          { "href": "https://www.gedore.com", "text": "visit gedore.com" },
          { "href": "https://www.carolus.de", "text": "visit carolus.de" },
          {
            "href": "https://de.gedore-shop.com",
            "text": "visit de.gedore-shop.com"
          }
        ]
      }
    ],
    "show": true
  },
  {
    "path": "zwilling",
    "title": "Zwilling",
    "year": "2015",
    "type": "website",
    "brandColor": "#ec121e",
    "logo": "../images/icons/zwilling-white.svg",
    "duration": "3 months",
    "tags": ["frontend", "modules", "task runner"],
    "blocks": [
      {
        "type": "description",
        "content": [
          "New at denkwerk and had to step right into development of new modules for Zwilling. Later on I was in charge of setting up Grunt pipelines for recurring dev tasks. It was a project including Zwilling online shop, Zwilling, Miyabi, Demeyere and Staub brand website. I was helping out in all five projects to fix bugs and create minor modules."
        ]
      },
      {
        "type": "contentImage",
        "title": "New UI Components",
        "content": [
          "As I can remember I was in charge for the show&hide pattern, longer paragraphs fading out, and a 'Read More' button added for expanding. A header module for special offers. As well as an language selector on the footer, which is used by all 5 websites."
        ],
        "image": {
          "title": "New UI Components",
          "src": "../images/content/project/zwilling/modules_2x.jpg"
        }
      },
      {
        "type": "contentImage",
        "title": "GruntJs Refactoring",
        "content": [
          "Building projects, minifying code, and optimizing assets were part of thr GruntJS tasks. All described in one huge file, I took the refactoring in my hands, categorizing first tasks in frequency of use. At the end a folder hierarchy organized modified and new tasks. This improved the time of the build by 80%."
        ],
        "image": {
          "title": "GruntJs Refactoring",
          "src": "../images/content/project/zwilling/task-runner_2x.jpg"
        }
      },
      {
        "type": "links",
        "links": [
          {
            "href": "https://www.zwilling.com",
            "text": "visit zwilling.com"
          }
        ]
      }
    ],
    "show": true
  }
]
