{"version":3,"file":"component---src-pages-work-jsx-abaf84b968a05ec33536.js","mappings":"8LAGaA,EAAUC,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,+DAIPC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAAwBA,EAAAA,EAAAA,SAKnCC,EAASH,EAAAA,QAAAA,IAAAA,WAAH,yDAAGA,CAAH,0JACD,SAAAI,GAAK,OAAIA,EAAMC,SAAW,KAMjC,SAAAD,GAAK,OAAIA,EAAME,OAAS,UAMxBL,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAAwBA,EAAAA,EAAAA,U,6ECNjCK,GAhBaP,EAAAA,QAAAA,IAAAA,WAAH,+DAAGA,CAAH,iIACZC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAeCF,EAAAA,QAAAA,QAAAA,WAAH,4DAAGA,CAAH,6cAOTC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,SAAwB,IAenCD,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAAwBA,EAAAA,EAAAA,QASnCD,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAahB,SAACE,GAAD,QACEA,EAAMI,SAAR,yHASKP,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,W,oGCvETO,EAAMT,EAAAA,QAAAA,IAAAA,WAAH,oDAAGA,CAAH,0D,UCkBT,SAASU,EAAWC,EAAKC,GAC9B,MAhBK,SAAkBD,GACvB,IAAME,EAASC,SAASH,EAAII,MAAM,GAAI,IAKtC,MAAO,CAACC,IAJKH,GAAU,GAAM,IAIhBI,MAHEJ,GAAU,EAAK,IAGVK,KAFE,IAATL,GAYeM,CAASR,GACrC,MAAM,QADN,EAAOK,IACP,KADA,EAAYC,MACZ,KADA,EAAmBC,KACnB,KAA0CN,EAA1C,I,cCfIQ,EAAUpB,EAAAA,QAAAA,IAAAA,WAAH,+DAAGA,CAAH,wIAMFC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,QAAwBA,EAAAA,EAAAA,SAKxCmB,GAAWrB,EAAAA,EAAAA,SAAOsB,EAAAA,MAAV,2EAAGtB,CAAH,2WAEQ,SAACI,GAAD,OAAWA,EAAMmB,cACV,SAACnB,GAAD,OAAWM,EAAWN,EAAMmB,WAAY,QAKrC,SAACnB,GAAD,OAAWM,EAAWN,EAAMmB,WAAY,OAkDxE,EAxBkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,gBAACJ,EAAD,KACGI,GACCA,EAAMC,KAAI,WAAoCC,GAAW,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMN,EAAwB,EAAxBA,WAC9B,OACE,gBAACF,EAAD,CACES,GAAE,SAAWF,EAAKG,cAClBR,WAAYA,EACZS,IAAKH,EAAKI,UACVC,IAAKR,GAEL,2BACE,gBAACjB,EAAD,CAAK0B,IAAKR,EAAOK,IAAKH,EAAKI,YAC3B,yBAAIN,U,6BCmDpB,EA7Ga,SAAC,GAAc,IAAZS,EAAW,EAAXA,KACd,OACE,gCACE,gBAACC,EAAA,EAAD,KACE,wBACEC,KAAK,cACLC,QAAQ,qLAEV,uDAEF,gBAAC,IAAD,KACE,uCACA,gBAAC,IAAD,CAAQlC,QAAQ,IAAIC,MAAM,OACxB,wMAKA,uTAOA,kLAOJ,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,2BACE,gBAAC,EAAD,CAAWkB,MAAOY,EAAKI,aAAaC,SAEtC,0BACE,gBAAC,IAAD,sBAEF,yRAMA,0PAQF,gBAAC,IAAD,CAASjC,SAAO,GACd,2BACE,gBAAC,EAAD,CAAWgB,MAAOY,EAAKM,SAASD,SAElC,2BACE,0BACE,gBAAC,IAAD,kBAEF,sRAMA","sources":["webpack://kevin-johne/./src/modules/content.jsx","webpack://kevin-johne/./src/modules/features.jsx","webpack://kevin-johne/./src/patterns/img.js","webpack://kevin-johne/./src/utils/color.js","webpack://kevin-johne/./src/modules/image-grid.jsx","webpack://kevin-johne/./src/pages/work.jsx"],"sourcesContent":["import styled from \"styled-components\"\r\nimport {breakpoint, breakpointsMap} from \"../utils/breakpoints\";\r\n\r\nexport const Content = styled.div`\r\n    width: 100%;\r\n    margin: 60px auto;\r\n\r\n    @media ${breakpoint(breakpointsMap.default, breakpointsMap.medium)} {\r\n      margin: 30px auto;\r\n    }\r\n`\r\n\r\nexport const Column = styled.div`\r\n  column-count: ${props => props.columns || 2};\r\n  column-gap: 50px;\r\n\r\n  margin-top: 1.5em;\r\n  margin-bottom: 1.5em;\r\n\r\n  width: ${props => props.width || '100%'};\r\n\r\n  p:first-of-type {\r\n      margin-top: 0;\r\n  }\r\n\r\n  @media ${breakpoint(breakpointsMap.default, breakpointsMap.medium)} {\r\n      column-count: 1;\r\n      width: 100%;\r\n  }\r\n`\r\n","import styled from \"styled-components\";\r\nimport { breakpoint, breakpointsMap } from \"../utils/breakpoints\";\r\n\r\nexport const ModFeature = styled.div`\r\n  @media ${breakpoint(breakpointsMap.large)} {\r\n    margin-top: 60px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 0px 40px;\r\n  }\r\n\r\n  margin-bottom: 120px;\r\n\r\n  h1 {\r\n    width: 100%;\r\n    margin-bottom: 60px;\r\n  }\r\n`;\r\n\r\nexport const Feature = styled.section`\r\n  margin-bottom: 20px;\r\n\r\n  h2 {\r\n    display: inline-block;\r\n  }\r\n\r\n  @media ${breakpoint(breakpointsMap.default, false)} {\r\n    &:not(:last-child) {\r\n      margin-bottom: 80px;\r\n    }\r\n\r\n    > :first-child {\r\n      margin: 0 auto 20px;\r\n      width: 100%;\r\n    }\r\n\r\n    > svg:first-child, > img:first-child {\r\n      display: block;\r\n    }\r\n  }\r\n\r\n  @media ${breakpoint(breakpointsMap.default, breakpointsMap.small)} {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    > :first-child {\r\n      order: 1;\r\n    }\r\n  }\r\n\r\n  @media ${breakpoint(breakpointsMap.small)} {\r\n    display: grid;\r\n    grid-template-columns: 1.5fr 1fr;\r\n\r\n    grid-gap: 0 20px;\r\n\r\n    > :first-child {\r\n      grid-column: 2;\r\n      grid-row: 1 / span 10;\r\n      margin-bottom: 20px;\r\n      padding: 0 20px;\r\n    }\r\n\r\n    ${(props) =>\r\n      !!props.reverse &&\r\n      `\r\n        grid-template-columns: 1fr 1.5fr;\r\n        > :first-child {\r\n          grid-column: 1;\r\n        }\r\n      `}\r\n  }\r\n\r\n  @media ${breakpoint(breakpointsMap.medium)} {\r\n    margin-bottom: 60px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\"\n\nexport const Img = styled.img`\n    width: 100%;\n    opacity: 1;\n    transition: opacity .3s ease-in;\n`\n\n//img[data-src] {\n//    opacity: 0;\n//}\n","/**\n * \n * @param {string} hex - in hex format #ffffff or #fff\n * @returns {object} { red, green, blue }\n */\nexport function hexToRgb(hex) {\n  const bigint = parseInt(hex.slice(1), 16);\n  const red = (bigint >> 16) & 255;\n  const green = (bigint >> 8) & 255;\n  const blue = bigint & 255;\n\n  return {red, green, blue};\n}\n\n/**\n * \n * @param {string} hex - in hex format #ffffff or #fff\n * @param {number} alpha - between 0 - 1\n * @returns {string}\n */\nexport function hextToRgba(hex, alpha) {\n  const {red, green, blue } = hexToRgb(hex);\n  return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n}\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Img } from \"../patterns/img\";\r\nimport { breakpoint, breakpointsMap } from \"../utils/breakpoints\";\r\nimport { hextToRgba } from \"../utils/color\";\r\nimport { Link } from \"gatsby\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(160px , 1fr));\r\n  gap: 30px;\r\n  margin-bottom: 60px;\r\n\r\n  @media ${breakpoint(breakpointsMap.default, breakpointsMap.medium)} {\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst GridCell = styled(Link)`\r\n  position: relative;\r\n  background-color: ${(props) => props.brandColor};\r\n  box-shadow: 0px 4px 16px ${(props) => hextToRgba(props.brandColor, 0.25)};\r\n  padding-top: 100%;\r\n  transition: box-shadow 0.3s;\r\n\r\n  &:hover {\r\n    box-shadow: 0px 10px 32px ${(props) => hextToRgba(props.brandColor, 0.7)};\r\n  }\r\n\r\n  div {\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 100%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  img {\r\n    margin-top: 20%;\r\n    height: 70px;\r\n    display: block;\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst ImageGrid = ({ items }) => {\r\n  return (\r\n    <Wrapper>\r\n      {items &&\r\n        items.map(({ title, path, logo, brandColor }, index) => {\r\n          return (\r\n            <GridCell\r\n              to={`/work/${path.toLowerCase()}`}\r\n              brandColor={brandColor}\r\n              src={logo.publicURL}\r\n              key={index}\r\n            >\r\n              <div>\r\n                <Img alt={title} src={logo.publicURL} />\r\n                <p>{title}</p>\r\n              </div>\r\n              \r\n            </GridCell>\r\n          );\r\n        })}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport ImageGrid from \"../modules/image-grid\";\r\nimport { Column, Content } from \"../modules/content\";\r\nimport { Feature } from \"../modules/features\";\r\nimport { Underline } from \"../patterns/typo\";\r\n\r\nconst Work = ({ data }) => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Style guides, e-commerce, web apps, and angular apps are the kind Kevin Guy has experience with. His portfolio is displaying recently finished projects as a frontend developer.\"\r\n        />\r\n        <title>Kevin Guy - portfolio</title>\r\n      </Helmet>\r\n      <Content>\r\n        <h1>Portfolio</h1>\r\n        <Column columns=\"1\" width=\"40%\">\r\n          <p>\r\n            Being a software developer for more than 10 years I had exposure to\r\n            many different programming languages and industries, developing all\r\n            sorts of websites and applications.\r\n          </p>\r\n          <p>\r\n            The journey started for me by writing scripts in Pascal to buy\r\n            domains and look up namespaces. during my time at University\r\n            manifested knowledge in OOP, TDD using Java and PHP. Then found my\r\n            long lasting pleasure with human and computer interactions and\r\n            became a frontend developer.\r\n          </p>\r\n          <p>\r\n            I have build small branding pages, high traffic eCommerce shops, and\r\n            business applications. The following projects should give you a good\r\n            overview.\r\n          </p>\r\n        </Column>\r\n      </Content>\r\n      <Content>\r\n        <Feature>\r\n          <div>\r\n            <ImageGrid items={data.applications.nodes} />\r\n          </div>\r\n          <h2>\r\n            <Underline>Applications</Underline>\r\n          </h2>\r\n          <p>\r\n            Here are some of my applications I worked on using different\r\n            frontend stacks depending on the project from AngularJS to React.\r\n            The systems on my portfolio including a B2B/B2C Portal for Veolia, a\r\n            CMS called Skylark at Ostmodern, and a n OMS for Str√∂er.\r\n          </p>\r\n          <p>\r\n            I transformed business requirements, in to clean maintainable code,\r\n            well tested user behaviours and scalable architecture, that made the\r\n            clients more efficient in their daily tasks and offered new business\r\n            opportunities.\r\n          </p>\r\n        </Feature>\r\n\r\n        <Feature reverse>\r\n          <div>\r\n            <ImageGrid items={data.websites.nodes} />\r\n          </div>\r\n          <div>\r\n            <h2>\r\n              <Underline>Websites</Underline>\r\n            </h2>\r\n            <p>\r\n              Websites are usually less complex compared to application, hence\r\n              are faster to develop and need less time input. When working for\r\n              an agency it is possible to work on several websites\r\n              simultaneously, as you can see of the time at Salmon and Denkwerk.\r\n            </p>\r\n            <p>\r\n              As I not just like to write good software, but as well have a good\r\n              eye for design, building sometimes a new website instead of an\r\n              application is refreshing.\r\n            </p>\r\n          </div>\r\n        </Feature>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  {\r\n    applications: allProjectsJson(\r\n      filter: { show: { eq: true }, type: { eq: \"application\" } }\r\n    ) {\r\n      nodes {\r\n        title\r\n        path\r\n        brandColor\r\n        logo {\r\n          publicURL\r\n        }\r\n      }\r\n    }\r\n    websites: allProjectsJson(\r\n      filter: { show: { eq: true }, type: { eq: \"website\" } }\r\n    ) {\r\n      nodes {\r\n        title\r\n        path\r\n        brandColor\r\n        logo {\r\n          publicURL\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Work;\r\n"],"names":["Content","styled","breakpoint","breakpointsMap","Column","props","columns","width","Feature","reverse","Img","hextToRgba","hex","alpha","bigint","parseInt","slice","red","green","blue","hexToRgb","Wrapper","GridCell","Link","brandColor","items","map","index","title","path","logo","to","toLowerCase","src","publicURL","key","alt","data","Helmet","name","content","applications","nodes","websites"],"sourceRoot":""}